<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" 
				width="100%" height="100%" 
				label="Connections{dataChanged ? '*' : ''}"
				creationComplete="handleCreationComplete()"
				>
	<mx:VBox height="100%">
		<ui:TreeWithSearch id="treeWithSearch" prompt="Search connections"/>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button label="Refresh" click="AdminInterface.instance.getConnectionNames()"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:TabNavigator id="tabNavigator" paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" width="100%" height="100%">
		<mx:Canvas id="simpleSetting" label="Add database connection{dataChanged ? '*' : ''}" width="100%" height="100%">
			<mx:VBox width="100%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" horizontalGap="0" verticalAlign="top">
				<mx:Label fontWeight="bold" text="Add or modify a database connection:"/>
				<ui:Indent label="Connection name">
					<mx:TextInput id="connectionNameInput" change="{dataChanged=true}" width="130"/>
					<mx:CheckBox label="Overwrite" id="configOverwrite"/>
				</ui:Indent>
				<ui:Indent label="SQL Server type">
					<ui:CustomComboBox change="{dataChanged=true}" id="connectionDBMSCombo" dataProvider="{ConnectionInfo.dbmsList}" width="130"/>
				</ui:Indent>
				<ui:IndentTextInput change="{dataChanged=true}" label="SQL Server IP" id="connectionIPInput" text="{hostIP}" inputWidth="130"/>
				<ui:IndentTextInput change="{dataChanged=true}" label="SQL Server Port" id="connectionPortInput" text="{ConnectionInfo.getDefaultPort(connectionDBMSCombo.text)}" inputWidth="130"/>
				<ui:Indent label="SQL Database name">
					<mx:TextInput change="{dataChanged=true}" id="connectionDatabaseInput" width="130"/>
					<mx:Label text="(Optional)"/>
					<ui:HelpComponent>
						This field is optional.  You can specify the name of a default database to connect to.
						For SQL Server, this is an instance name.
						Similarly in PostGreSQL, databases are different from schemas.
						MySQL does not differentiate between the two.
					</ui:HelpComponent>
					<!-- 'This field is required only for MS SQLServer connections. If you had a Server Name \'LocalMachine\\Express\', then this field should be entered as Express. If there is no instance name for your server, you may leave this blank.' -->
				</ui:Indent>
				<ui:IndentTextInput change="{dataChanged=true}" label="SQL User Name" id="connectionUserInput" inputWidth="130"/>
				<ui:IndentTextInput change="{dataChanged=true}" label="SQL Password" id="connectionPasswordInput" displayAsPassword="true" inputWidth="130"/>
				<ui:IndentTextInput label="User Folder Name" text="" id="folderNameInput" inputWidth="130" toolTip="Specify the folder in docroot to store user-created configurations"/>
				<ui:Indent>
					<mx:CheckBox change="{dataChanged=true}" label="Grant Superuser Permissions" id="superuserCheckbox"/>					
				</ui:Indent>
				<mx:HBox>
					<mx:Button label="Save this database connection" click="saveConnectionInfo()"/>
					<mx:Button label="Clear fields" click="clearConnectionFields()" />
					<mx:Button label="Remove selected connection" click="handleRemoveConnection()" enabled="{treeWithSearch.tree.selectedItem != null}"/>
				</mx:HBox>
			</mx:VBox>
		</mx:Canvas>
		<mx:Canvas id="migrateTab" label="Configuration storage location" width="100%" height="100%">
			<mx:VBox  height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" horizontalGap="0" verticalAlign="top">
				<mx:Label text='You are currently using the "{AdminInterface.instance.databaseConfigInfo.connection}" connection to store configuration data.'/>
				<mx:Spacer/>
				<mx:Label text="You may optionally migrate the configuration data to a new database with the controls below."/>
				<ui:Indent label="Connection to use">
					<ui:CustomComboBox id="migrateConnectionCombo" dataProvider="{AdminInterface.instance.connectionNames}" width="200"/>
				</ui:Indent>
				<ui:IndentTextInput label="Password" id="migratePasswordInput" displayAsPassword="true"/>
				<ui:IndentTextInput label="Schema to use" id="migrateSchemaInput" text="{AdminInterface.instance.databaseConfigInfo.schema}"/>
				<mx:Button id="migrateButton" label="Store Weave configuration at this location" click="migrateToDatabase()" />
			</mx:VBox>
		</mx:Canvas>
		<!--		<mx:Canvas label="etc" width="100%" height="100%">
		<mx:TextArea x="55.5" y="76" width="413" height="221" editable="false" selectable="false">
		<mx:text><![CDATA[Controls for editing the item selected in the tree on the left.  Most used/simplest settings should be highlighted, more advanced controls available via more tabs if needed]]></mx:text>
		</mx:TextArea>
		</mx:Canvas>-->
	</mx:TabNavigator>	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.WeaveAPI;
			import weave.services.AdminInterface;
			import weave.services.DelayedAsyncInvocation;
			import weave.services.addAsyncResponder;
			import weave.services.beans.ConnectionInfo;
			import weave.ui.Indent;
			import weave.ui.IndentTextInput;
			import weave.utils.PopUpUtils;
			
			[Bindable]
			private var serverConfigEntryWasModified:Boolean = false;
			
			[Bindable]
			private var dataChanged:Boolean = false;

			private function handleCreationComplete():void
			{
				BindingUtils.bindSetter(handleConnectionNames, AdminInterface.instance, "connectionNames");
				treeWithSearch.tree.addEventListener(ListEvent.ITEM_CLICK, handleItemClick);
			}
			
			public function handleConnectionNames(names:Array):void
			{
				treeWithSearch.generateFlatTreeFromLabels(names);
				if (names.length == 0)
				{
					superuserCheckbox.selected = true;
					superuserCheckbox.enabled = false;
				}
				else
				{
					superuserCheckbox.enabled = true;
					if (!AdminInterface.instance.sqlConfigExists)
						tabNavigator.selectedChild = migrateTab;
				}
				migrateTab.enabled = names.length > 0;
			}
			
			private function handleItemClick(event:ListEvent):void
			{
				if (dataChanged)
				{
					function cancel():void
					{
						treeWithSearch.tree.selectedItem = null;
					}
					// ask user to confirm
					PopUpUtils.confirm(
						this,
						"Discard changes",
						'Discard unsaved changes?',
						loadDatabaseInfo, cancel,
						'Discard', 'Cancel'
					);
				}
				else
					loadDatabaseInfo();
			}
			
			private function loadDatabaseInfo():void
			{
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				tabNavigator.selectedChild = simpleSetting;
				
				var name:String = treeWithSearch.tree.selectedItem.label;
				addAsyncResponder(AdminInterface.instance.getConnectionInfo(name), handleResult);

				function handleResult(event:ResultEvent, token:Object = null):void
				{
					var info:ConnectionInfo = new ConnectionInfo(event.result);
					//Connection name
					connectionNameInput.text = info.name;
					//SQL Server Type
					connectionDBMSCombo.selectedIndex = ConnectionInfo.dbmsList.indexOf(info.dbms);
					//SQL Server Ip
					connectionIPInput.text = info.ip;
					//SQL Server Port
					connectionPortInput.text = info.port;
					//SQL Database Name
					connectionDatabaseInput.text = info.database; 
					//User Name
					connectionUserInput.text = info.user;
					//Password
					connectionPasswordInput.text = info.pass;
					// is superuser
					superuserCheckbox.selected = info.is_superuser;
					// user folder name
					folderNameInput.text = info.folderName;
				}
				
				dataChanged = false;
			}
			
			private function get hostUrl():String
			{
				var result:Array = WeaveAPI.topLevelApplication.url.split("http://");
				var index:int = (result.length > 1) ? 1 : 0;
				result = (result[index] as String).split("/");
				return result[0] as String;
			}
			
			private const hostIP:String = hostUrl.split(':')[0];
			
			protected function clearConnectionFields():void
			{
				connectionNameInput.text = "";
				connectionDBMSCombo.selectedIndex = 0;
				connectionIPInput.text = "localhost";
				connectionPortInput.text = "3306";
				connectionDatabaseInput.text = "";
				connectionUserInput.text = "";
				connectionPasswordInput.text = "";
				folderNameInput.text = "";
				configOverwrite.selected = false;
				superuserCheckbox.selected = (AdminInterface.instance.connectionNames.length == 0);
			}
			
			private function saveConnectionInfo():void
			{
				var info:ConnectionInfo = new ConnectionInfo(null);
				info.name = connectionNameInput.text;
				info.dbms = connectionDBMSCombo.text;
				info.ip = connectionIPInput.text;
				info.port = connectionPortInput.text;
				info.database = connectionDatabaseInput.text;
				info.user = connectionUserInput.text;
				info.pass = connectionPasswordInput.text;
				info.is_superuser = superuserCheckbox.selected;
				info.folderName = folderNameInput.text;
				
				AdminInterface.instance.saveConnectionInfo(info, configOverwrite.selected).addAsyncResponder(handleSave);
				function handleSave(..._):void
				{
					if (info.name == AdminInterface.instance.activeConnectionName)
					{
						AdminInterface.instance.authenticate(info.name, info.pass);
						AdminInterface.instance.userHasAuthenticated = true;
					}
				}
				dataChanged = false;
			}
			
			private function migrateToDatabase():void
			{
				migrateButton.enabled = false;
				var query:DelayedAsyncInvocation = AdminInterface.instance.setDatabaseConfigInfo(
					   migrateConnectionCombo.text,
					   migratePasswordInput.text,
					   migrateSchemaInput.text
					);
				query.addAsyncResponder(enableMigrateButton, enableMigrateButton);
				function enableMigrateButton(..._):void
				{
					migrateButton.enabled = true;
					AdminInterface.instance.getConnectionNames(); // causes databaseConfigInfo to update
				}
			}
			
			private function handleRemoveConnection():void
			{
				var connectionLabel:String;
				
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				connectionLabel = treeWithSearch.tree.selectedItem.label;
				
				PopUpUtils.confirm(
					this,
					"Confirm delete",
					'Delete connection "' + connectionLabel + '"?',
					del, null,
					'Delete', 'Cancel'
				);
				function del():void
				{
					AdminInterface.instance.removeConnectionInfo(treeWithSearch.tree.selectedItem.label);
				}
			}
			
		]]>
	</mx:Script>
</mx:HDividedBox>
