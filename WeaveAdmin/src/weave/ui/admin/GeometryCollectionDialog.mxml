<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		 xmlns="weave.ui.admin.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%"
		 creationComplete="creationComplete()"
		 xmlns:ui="weave.ui.*">

	<mx:RadioButtonGroup id="shapeOrKey"/>
	<mx:HBox>
		<mx:RadioButton id="geometryCollectionRadio" group="{shapeOrKey}" label="{Strings.geometry_collection}" textAlign="left" width="{_indent}"/>
		<mx:HBox enabled="{geometryCollectionRadio.selected &amp;&amp; !refreshingGeoms}">
			<ui:CustomComboBox id="geometryCollectionCombo" enabled="{geometryCollectionCombo.dataProvider.length > 0}" prompt="Select a geometry collection..." dataProvider="{AdminInterface.instance.geometryCollectionNames}" toolTip="{Strings.tip_geometry_collection_dropdown}"/>
			<mx:Button id="geomRefresh" label="Refresh" click="getGeometryCollectionNames()" toolTip="{Strings.tip_refresh_geometry_collections}"/>
		</mx:HBox>
	</mx:HBox>
	<mx:HBox>
		<mx:RadioButton id="keyTypeRadio" group="{shapeOrKey}" selected="true" label="{Strings.key_type}" textAlign="left" width="{_indent}" toolTip="{Strings.tip_key_type_radiobutton}"/>
		<mx:HBox enabled="{keyTypeRadio.selected &amp;&amp; !refreshingKeyTypes}">
			<ui:CustomComboBox id="keyTypeCombo" editable="true" text="{_defaultKeyType}" dataProvider="{AdminInterface.instance.keyTypes}" toolTip="{Strings.tip_key_type_dropdown}" valueCommit="if (UIUtils.hasFocus(keyTypeCombo)) keyTypeIsSet = true;"/>
			<mx:Button id="keyTypeRefresh" label="Refresh" click="getKeyTypes()" toolTip="{Strings.tip_refresh_key_types}"/>
		</mx:HBox>
		<!--mx:Button label="?" click="showHelpForKeyType()"/-->
	</mx:HBox>
	
	<!-- Choose between Assgning a Geometry Collection Name or a Key Type-->
	<mx:Script>
		<![CDATA[
			import weave.Strings;
			import weave.core.UIUtils;
			import weave.services.AdminInterface;
			import weave.services.DelayedAsyncInvocation;
			
			
			[Bindable] private var _indent:Number = NaN;
			
			private function creationComplete():void
			{
				getGeometryCollectionNames();
				getKeyTypes();
			}
			
//			private function showHelpForKeyType():void
//			{
//				Alert.show(
//					'If two tables have compatible keys, you should give them the same key type.  ' +
//					'If two tables have incompatible keys, they should not have the same key type.  ' +
//					'Weave only allows two columns to be compared if they have the same key type.',
//					'Admin Console Help'
//				);
//			}
			
			public function get selectedGeometryCollection():String
			{
				if (geometryCollectionRadio.selected)
					return geometryCollectionCombo.text;
				else
					return '';
			}
			
			public function get selectedKeyType():String
			{
				if (keyTypeRadio.selected)
					return keyTypeCombo.text;
				
				return '';
			}
			
			public function set defaultKeyType(value:String):void
			{
				if (!keyTypeIsSet)
					_defaultKeyType = value;
			}
			[Bindable] private var _defaultKeyType:String = '';
			
			private var keyTypeIsSet:Boolean = false;
			[Bindable] private var refreshingGeoms:Boolean = false;
			[Bindable] private var refreshingKeyTypes:Boolean = false;
			
			private function getGeometryCollectionNames():void
			{
                            /*
				var query:DelayedAsyncInvocation = AdminInterface.instance.getGeometryCollectionNames();
				if (query)
				{
					refreshingGeoms = true;
					var handler:Function = function(..._):void { refreshingGeoms = false; };
					query.addAsyncResponder(handler, handler);
				}
                            */
			}
			private function getKeyTypes():void
			{
				var query:DelayedAsyncInvocation = AdminInterface.instance.getKeyTypes();
				if (query)
				{
					refreshingKeyTypes = true;
					var handler:Function = function(..._):void { refreshingKeyTypes = false; };
					query.addAsyncResponder(handler, handler);
				}
			}
		]]>
	</mx:Script>
</mx:VBox>
