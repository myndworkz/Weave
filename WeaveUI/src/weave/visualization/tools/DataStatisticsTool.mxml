<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This exhibits all important statistics about a column in a datagrid
    It also allows for viewing different correlation coefficients between columns

	@author spurushe
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="Data Statistics"
				x="15%" width="70%" y="15%" height="70%"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool"
				>
	
	<mx:HBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
		<mx:VBox width="30%" height="100%" verticalGap="0">
			<mx:Label text="(1) Select data to view statistics"/>
			<ColumnListComponent id="inputColumnList" label="Input columns" hashMap="{variables}" width="100%" height="100%"/>			
		</mx:VBox>
		
		<mx:VBox width="30%" height="100%" verticalGap="0">
			<mx:Label text="(2) Select column statistics"/>
			
			<mx:CheckBox id="ColumnMax" label="Column Maximum" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:CheckBox id="ColumnMin" label="Column Minimum" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:CheckBox id="ColumnStdv" label="Standard Deviation" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:CheckBox id="ColumnVariance" label="Variance" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:CheckBox id="ColumnAverage" label="Average" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:CheckBox id="ColumnStdErr" label="Standard Error" paddingBottom="5" selected="false" click="scriptHandler(event)"/>
			<mx:HBox>
				<mx:Button width="45%" id="doStatistics" label="Compute Statistics" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
						   click="doStatistics_clickHandler(event)"/>
				<mx:Button  horizontalGap="10" width="45%" id="DisplayResults" label="Display Results" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
						 click="DisplayResults_clickHandler(event)"/>
			</mx:HBox>
			
		</mx:VBox>
		
	    
		<mx:VBox width="30%" height="100%">
			<mx:Label text="(3) Calculate Correlation Coefficients"/>
			<mx:Button paddingTop="5" paddingBottom="5" paddingLeft="5" id="PearsonsCorr" label="Pearson's Coefficient" click="Corr_clickHandler(event)"/>
			<mx:Button paddingTop="5" paddingBottom="5" paddingLeft="5" id="KendallCorr" label="Kendall's Coefficient" click="Corr_clickHandler(event)"/>
			<mx:Button paddingTop="5" paddingBottom="5" paddingLeft="5" id="SpearmanCorr" label="Spearman's Coefficient" click="Corr_clickHandler(event)"/>
			
			<mx:Label text="Distribution of column data"/>
			<mx:List rowHeight="100" width="100%" height="100%" id="distrList" dataProvider = "{distributionObjCanvasArray}">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox height="50%" verticalScrollPolicy="off">
							<mx:Label id="lb"  fontWeight="bold"/>
							<mx:Image  id="img"  />
								<mx:Script>
									<![CDATA[
										override public function set data(value:Object):void{
						
											//super.data = value;
											if(value != null)
											{
												lb.text = value.label;
												img.source = value.icon;
											}
										}
									]]>
								</mx:Script>
							
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
		
		
		
		</mx:HBox>
	<mx:Script>
		<![CDATA[
			import flash.sampler.Sample;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.containers.Canvas;
			import mx.containers.Panel;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.Image;
			import mx.controls.List;
			import mx.controls.TileList;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.igniterealtime.xiff.collections.ArrayCollection;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ICallbackCollection;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnStatistics;
			import weave.api.data.IQualifiedKey;
			import weave.api.disposeObjects;
			import weave.api.linkBindableProperty;
			import weave.api.linkableObjectIsBusy;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.CallbackCollection;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.NumberColumn;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.ui.userControls.DatagridDisplay;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			import weave.visualization.tools.SimpleVisTool;
			WeaveAPI.registerImplementation(IVisTool, DataStatisticsTool, "Data Statistics Tool");
			
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var script:String = "";
			private var joinedColumns:Array ;
			public var outputNames:Array = new Array();
			public var finalGridDisplayArray:Array = new Array();
			public var colNames:Array = new Array();
			public var latestjoinedColumnKeys:Array = new Array();
			public var sentToRcounter:int = 0; public var receivedFromRcounter:int = 0;
			public var binnedColumns:Array = new Array();//columns containing binning information which are to be drawn
			
			override protected function constructor():void
			{
				super.constructor();				
				var columns:Array = SimpleVisTool.getDefaultColumnsOfMostCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					variables.requestObjectCopy(null, columns[i]);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				//variables.addImmediateCallback(this, columnProcessing);
				variables.addGroupedCallback(this, normalizationinR);
			}
			
			private function normalizationinR():void 
			{
				if (WeaveAPI.SessionManager.linkableObjectIsBusy(variables))//do the next chunk of code only after _plotter.columns is filled
					return;
				
				var selectedColumns:Array = variables.getObjects(); //Columns from ColumnListComponent 
				var attributeColumns:Array = new Array();
				for (var f:int = 0; f < selectedColumns.length; f++)
				{
					var _col:IAttributeColumn = selectedColumns[f];
					var dataType:String = ColumnUtils.getDataType(_col);
					
					
					if(dataType == "number")//screening only numeric columns for normalization
					{
						colNames.push(ColumnUtils.getTitle(_col  as IAttributeColumn));
						attributeColumns.push( _col as IAttributeColumn);
					}
					
				}
				//columns sent as a matric, all at one time
				var inputValues:Array = new Array(); var inputNames:Array;
				inputNames = ["mymatrix"];
				var outputNames:Array = ["normOutput"];
				var script:String = "frame <- data.frame(mymatrix)\n" +
					"donorm <- function(frame){\n" +
					"RR <- nrow(frame)\n"+
					"CC <- ncol(frame)\n"+
					"for (z in 1:CC){\n"+
					"maxr <- max(frame[z])\n"+
					"minr <- min(frame[z])\n"+
					"for(i in 1:RR){\n"+
					" frame[i,z] <- (frame[i,z] - minr) / (maxr - minr)\n"+
					" }\n"+
					"}\n"+
					"frame\n"+
					"}\n"+
					"normOutput <- donorm(frame)\n";
				
				var result:Array = joinColumns(attributeColumns);
				latestjoinedColumnKeys = result[0];
				joinedColumns = result[1];
				//Ten stat details eg. max, min, mean etc etc
				for (var u:int = 0 ; u < 10; u++)
				{
					finalGridDisplayArray[u] = new Array();
					//(finalGridDisplayArray[u] as Array).push(outputNames[u]);
				} 
				
				if ( latestjoinedColumnKeys.length != 0)
				{
					inputValues.push(joinedColumns); 
					var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,script,"",false,false,false);
					DelayedAsyncResponder.addResponder(query, handleNormScriptResult, handleRunScriptFault,latestjoinedColumnKeys);
				}
			}
			
			/** Returns the normalized dataset */
			private function handleNormScriptResult(event:ResultEvent, token:Object = null):void
			{
				if (token != latestjoinedColumnKeys){return;}//handles two asynchronous calls made one after the other
				
				var temRObjects:Array = new Array();
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;				
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					temRObjects = (rResult.value) as Array;
					
				}	
				
				//Once normalized Columns are returned from R, send them into R for binning
				binningDataFromR(temRObjects);
				
			}
			
			
			//this function returns a histogram object from R for plotting in Weave
			private function binningDataFromR(_normColumns:Array):void
			{
				//columns sent as vectors, one at a time
					for(var i:int = 0; i < _normColumns.length; i++)
					{
						var inputValues:Array = new Array(); var inputNames:Array = new Array();
						inputValues.push(_normColumns[i]);
						inputNames = ["myColumn"];
						var binningScript:String = "answer <- hist(myColumn, plot = FALSE)";
						var resultNames: Array = new Array(); resultNames = ["answer$counts","answer$breaks"];
						
						var query:AsyncToken = Rservice.runScript(latestjoinedColumnKeys, inputNames, inputValues, resultNames, binningScript,"", false, false, false);
						DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, latestjoinedColumnKeys);
						sentToRcounter++;
					}
						
			
			}
			
			
			private static function get selection():KeySet
			{
				return Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			}
			
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			
			/* Different Commands to be sent to R */
			protected function scriptHandler(event:MouseEvent):void
			{
				if (script.length == 0)
				{
					if(event.target == ColumnMax && ColumnMax.selected == true)
					{
						script = "ColumnMax <- max(myColumn)";
						outputNames.push("ColumnMax");
					}
					if(event.target == ColumnMin && ColumnMin.selected == true)
					{
						script = "ColumnMin <- min(myColumn)";
						outputNames.push("ColumnMin");
					}	
					
					if(event.target == ColumnVariance && ColumnVariance.selected == true)
					{
						script = "ColumnVariance <- var(myColumn)";
						outputNames.push("ColumnVariance");
					}	
					if(event.target == ColumnStdv && ColumnStdv.selected == true)
					{
						script = "ColumnStdv <- sd(myColumn)";
						outputNames.push("ColumnStdv");
					}
					if(event.target == ColumnAverage && ColumnAverage.selected == true)
					{
						script = "ColumnAverage <- mean(myColumn)";
						outputNames.push("ColumnAverage");
					}
					
					if(event.target == ColumnStdErr && ColumnStdErr.selected == true)
					{
						script = "stderr <- function(myColumn)\n" +
							"{ m <- sqrt(var(myColumn)/length(myColumn))\n" +
							"m}\n" +
							"ColumnStdError <- stderr(myColumn)";
						outputNames.push("ColumnStdError");
					}
				}
				
				else{
					if(event.target == ColumnMax && ColumnMax.selected == true)
					{
						script = script + "\nColumnMax <- max(myColumn)";
						outputNames.push("ColumnMax");
					}
					if(event.target == ColumnMin && ColumnMin.selected == true)
					{
						script =  script + "\nColumnMin <- min(myColumn)";
						outputNames.push("ColumnMin");
					}	
					
					if(event.target == ColumnVariance && ColumnVariance.selected == true)
					{
						script = script + "\nColumnVariance <- var(myColumn)";
						outputNames.push("ColumnVariance");
					}
					
					if(event.target == ColumnStdv && ColumnStdv.selected == true)
					{
						script = script + "\nColumnStdv <- sd(myColumn)";
						outputNames.push("ColumnStdv");
					}
					if(event.target == ColumnAverage && ColumnAverage.selected == true)
					{
						script = script + "\nColumnAverage <- mean(myColumn)";
						outputNames.push("ColumnAverage");
					}
					
					if(event.target == ColumnStdErr && ColumnStdErr.selected == true)
					{
						script = "\nstderr <- function(myColumn)\n" +
							"{ m <- sqrt(var(myColumn)/length(myColumn))\n" +
							"m}\n" +
							"\nColumnStdError <- stderr(myColumn)";
						outputNames.push("ColumnStdError");
					}
					
				}
				
			}
			
			protected function doStatistics_clickHandler(event:MouseEvent):void
			{				
				
				
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				receivedFromRcounter++;
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;		
				var columnResult:Array = new Array();//collects results for one column
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					// now plot the bins 
					columnResult.push(rResult);
					finalGridDisplayArray[i].push( rResult.value);
				
				}	
				
				
				binnedColumns.push(columnResult);//collects results of all columns
				
				//draw the distributions once all the binning data has been returned
				if(sentToRcounter == receivedFromRcounter)
				{
					drawingColumnDistribution(binnedColumns);
				}
				
			}
			
		//	private  var showDistrList:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
			//drawing binned Columns obtained from R
			
			[Bindable]
			public var distributionObjCanvasArray:Array = new Array();//collects all the canvases for all the columns (one canvas per column)
			private function drawingColumnDistribution(_binnedColumns:Array):void
			{
				//x axis values are normalized between 0 and 1 (are multipled by factor to fit canvas size)
				//bar heights are normalized using the tallest bar
				
				distrList.labelField = "label"; distrList.iconField = "icon";
				
				// looping over columns
				for(var k:int = 0; k < _binnedColumns.length; k++)
				{
					var distributionObj:Object = new Object();
					
					distributionObj["label"] = colNames[k];
					var can:Canvas = new Canvas();
					can.width= 100; 
					can.height = 100;
					can.graphics.clear();
					
					can.graphics.lineStyle(1,0x000000,0.75);
					
					var margin:Number = 20;
					var columnData:Array = _binnedColumns[k];
					var colFreq:Array = ((columnData[0] as RResult).value as Array);//first element is the frequencies, hence hard coded
					var colBreaks:Array = ((columnData[1] as RResult).value as Array);//second elemet is the range split
					
					//drawing x- axis
					can.graphics.moveTo(margin, (can.height - margin));
					can.graphics.lineTo((can.width - margin), (can.height - margin));
					
					//ratio
					var scaleFactor:Number = can.height - (margin*2); //margin on the left and right hand side
					
					var maxColHeight:Number = Math.max.apply(null,colFreq);//getting the maximum height of the bars and normalizing the bar height
					
					
					var startPoint:Point = new Point(); startPoint.x = 20; startPoint.y = (can.height - margin);
					
					//drawing the distribution
					can.graphics.moveTo(startPoint.x, startPoint.y);
					//looping over the bins in each column
					for(var i :int = 0; i < colFreq.length; i++)
					{
						var endP:Point = new Point();
						var middleP:Point = new Point();
						var middleP2:Point = new Point();
						
						var normBarHeight:Number = colFreq[i]/maxColHeight;//gives a value between 0 and 1
						//range between two succesiive bins
						var range: Number = colBreaks[i+1] - colBreaks[i];
						middleP.x = startPoint.x ; middleP.y =  startPoint.y - (normBarHeight * scaleFactor);
						middleP2.x = middleP.x + (range * scaleFactor); middleP2.y = middleP.y;
						endP.x = middleP2.x; endP.y = startPoint.y ;
						
						
						can.graphics.lineTo(middleP.x,  middleP.y);
						can.graphics.lineTo(middleP2.x, middleP2.y);
						can.graphics.lineTo(endP.x, endP.y);
						
						startPoint = endP;
						can.graphics.moveTo(startPoint.x, startPoint.y);
						
					} 
					
				
					distributionObj["icon"] = can;
					distributionObjCanvasArray[k] = distributionObj;//pushing the respective distribution of the column
				}
				 
			}
			
			
			//This function handles the matrices returned by the correlation scripts
			private function handleCorrRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				var Robj:Array = event.result as Array;				
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
				}	
				
				var dg:DatagridDisplay = new DatagridDisplay();dg.initialize();
				dg.title = (token[0] as String);
				dg.actualDG.dataProvider = rResult.value;
				mx.managers.PopUpManager.addPopUp(dg, this,false);
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			
			
			//--------------------Button Clicks-------------------------------------
			protected function DisplayResults_clickHandler(event:MouseEvent):void
			{
				//drawDistributionsFromR();
				colNames.unshift("Statistics");
				finalGridDisplayArray.unshift(colNames);
  				var dg:DatagridDisplay = new DatagridDisplay();dg.initialize();
				/* var dgCol:Array = new Array();
				for(var g:int = 0; g < colNames.length; g++)
				{
					dgCol[g] = new DataGridColumn();
					(dgCol[g] as DataGridColumn).headerText = (colNames[g] as String);
				}
				
				
				var arr:mx.collections.ArrayCollection = new mx.collections.ArrayCollection();
				arr.source = finalGridDisplayArray;
				dg.actualDG.columns = dgCol;
				dg.actualDG.dataProvider = arr; */
				dg.actualDG.dataProvider = finalGridDisplayArray;
				mx.managers.PopUpManager.addPopUp(dg, this,false);
			}
			
			protected function Corr_clickHandler(event:MouseEvent):void
			{
				//columns sent as a mtrix, all at the same time
				var outputNames:Array = new Array();
				var corScript:String = "";
				if(event.target == PearsonsCorr)
				{	 corScript = "Pearsons_Correlation_Coefficient <- cor(myMatrix, use = \"everything\", method = \"pearson\")"
					 outputNames.push("Pearsons_Correlation_Coefficient");
				}
				if(event.target == SpearmanCorr)
				{	corScript = "Spearmans_Correlation_Coefficient <- cor(myMatrix, use = \"everything\", method = \"spearman\")"
					outputNames.push("Spearmans_Correlation_Coefficient")};
				if(event.target == KendallCorr)
				{	corScript= "Kendalls_Correlation_Coefficient <- cor(myMatrix, use = \"everything\", method = \"kendall\")"
					outputNames.push("Kendalls_Correlation_Coefficient")};
				
				var inputNames:Array = ["myMatrix"];
			
				var inputValues:Array = new Array();
				inputValues.push(joinedColumns);
				var query:AsyncToken = Rservice.runScript(latestjoinedColumnKeys,inputNames,inputValues,outputNames,corScript,"",false,false,false);
				DelayedAsyncResponder.addResponder(query, handleCorrRunScriptResult, handleRunScriptFault,outputNames);
			}
			
		]]>
	</mx:Script>
</DraggablePanel>