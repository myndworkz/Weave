<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

/*Editor to specify parameters for Kmeans Clustering*/
@spurushe-->



<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="KMeans Clustering editor"
				width="400" height="300"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true" implements="weave.api.ui.IVisTool"
				paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">
	<mx:HBox>
		<mx:VBox paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<mx:Label text="(1) Assign variable names and check Attributes KMeans Clustering"/>
			<mx:TextArea id = "assignForClusterTA" width="50%" height="50%" wordWrap="false"/>
			<mx:HBox>
				<mx:Label text=" (2) Number of Clusters:"/>
				<mx:TextInput id="clusternumberTI"/>
			</mx:HBox>
			
			<mx:HBox>
				<mx:Label text=" (3) Number of Iterations:"/>
				<mx:TextInput id="iterationnumberTI"/>
			</mx:HBox>
			
			
			<mx:Label text=" (4) Select an algorithm for KMeans"/>
			<mx:CheckBox label="Hartigan-Wong" />
			<mx:CheckBox label= "Lloyd" />
			<mx:CheckBox label="Forgy"/>
			<mx:CheckBox label="MacQueen"/>
		</mx:VBox>
		
		<mx:VBox>
			<mx:Label text="KMeans Clustering Results"/>
			<mx:TextArea width="100%" height="100%"/>
		</mx:VBox>
	
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.Image;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.CSVColumn;
			import weave.data.AttributeColumns.StringColumn;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			import weave.utils.VectorUtils;
			import weave.visualization.tools.DataTableTool;
			import weave.visualization.tools.SimpleVisTool;
			
			
			
			private static function get selection():KeySet
			{
				return Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			}
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			private var columnNames:Array = new Array();//stores the names of the columns (an array of strings)
			private var assignNames: Array = new Array();
			private var clusterInputValues:Array = new Array();
			
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]] where keys implement IQualifiedKey
			 */
			private function joinColumns(columns:Array):Array
			{
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, true, keys);
				return [result.shift(),result];
			}
			
			protected function clusterButton_clickHandler(event:MouseEvent):void
				
			{
				var result:Array = new Array();
				var joinedColumnQKeys:Array; //Columns from Joined columns Method
				var joinedColumns:Array;
				
				//TO BE DONE
				//Determine choice of columns for clustering, (1)Original (2) Imputed  (3)Both
				//var selectedColumns:Array = dataTB.columns.getObjects(); imputed data used for clustering
				var selectedColumns:Array = variables.getObjects(); //Columns from ColumnListComponent
				
				var attributeColumns:Array = new Array();
				columnNames = [];
				//Use as Attribute column as joinColumns takes members of IAttributeColumn
				var idx:int = 0;
				for(var i:int = 0; i<selectedColumns.length; i++)
				{
					var attrCol:IAttributeColumn = selectedColumns[i] as IAttributeColumn;
					if((ColumnUtils.getTitle(attrCol) == "Key") || (ColumnUtils.getTitle(attrCol) == "NoOfMissingR")){
						
					}
					else{
						attributeColumns[idx] = attrCol;
						idx++;
					} 
					
					
				}
				//joinColumns Called only When columns are added to ColumnListComponent
				
				if(selectedColumns.length >0)
				{					
					// get records for keys common to all columns 
					result = joinColumns(attributeColumns);
					joinedColumnQKeys = result[0];
					joinedColumns = result[1];
					
				}
				
				clusterInputValues = joinedColumns;
				
				//variable names for the columns to be used in R
				var RscriptAssignNames:String = assignForClusterTA.text;//as complete string
				
				//broken into individual variable names
				assignNames = VectorUtils.flatten(WeaveAPI.CSVParser.parseCSV(assignForClusterTA.text));				
				
				
				//var showWarnings:Boolean = warningCB.selected;
				
				
				
				var clusterQuery:AsyncToken = Rservice.KMeansClustering(assignNames, clusterInputValues,false, Number(clusternumberTI.text),Number(iterationnumberTI.text));
				//var script:String = "Clus <- kmeans(dataframe1, "+ clusterNumber.text+","+ iterationNumber.text+")"
				DelayedAsyncResponder.addResponder(clusterQuery, handleClusterScriptResult, handleRunScriptFault, joinedColumnQKeys);
				
			}
			
			private function handleClusterScriptResult(event:ResultEvent, token:Object = null):void
			{
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
				
				
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token as Array;
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for (var p:int = 0;p < RresultArray.length; p++)
				{
					
					if(RresultArray[p].value is Array){
						if(keys){
							if ((RresultArray[p].value).length == keys.length){
								if (RresultArray[p].value[0] is String)	{
									var testStringColumn:StringColumn = Weave.root.requestObject(RresultArray[p].name, StringColumn, false);
									var keyVec:Vector.<IQualifiedKey> = new Vector.<IQualifiedKey>();
									var dataVec:Vector.<String> = new Vector.<String>();
									VectorUtils.copy(keys, keyVec);
									VectorUtils.copy(Robj[p].value, dataVec);
									testStringColumn.setRecords(keyVec, dataVec);
									if (keys.length > 0)
										testStringColumn.metadata.@keyType = (keys[0] as IQualifiedKey).keyType;
									testStringColumn.metadata.@name = RresultArray[p].name;
								}
								else{
									var table:Array = [];
									for (var k:int = 0; k < keys.length; k++)
										table.push([ (keys[k] as IQualifiedKey).localName, Robj[p].value[k] ]);
									
									//testColumn are named after respective Objects Name (i.e) object{name: , value:}
									var testColumn:CSVColumn = Weave.root.requestObject(RresultArray[p].name, CSVColumn, false);
									testColumn.keyType.value = keys.length > 0 ? (keys[0] as IQualifiedKey).keyType : null;
									testColumn.numericMode.value = true;
									testColumn.csvData.value = WeaveAPI.CSVParser.createCSV(table);
									testColumn.title.value = RresultArray[p].name;
								}
							}
						}						
					}										
				}
			}
			
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			
		]]>
	</mx:Script>

</DraggablePanel>
