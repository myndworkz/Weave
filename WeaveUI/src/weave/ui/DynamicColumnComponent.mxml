<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
@author abaumann
@author skolman
@author adufilie
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 width="100%" height="30" creationPolicy="all"
		 verticalAlign="middle" implements="weave.api.core.ILinkableObject"
		 horizontalGap="4">
	<mx:Label text="{label}" fontWeight="bold" minWidth="64" visible="{showLabel}" includeInLayout="{showLabel}"/>
	<LinkableObjectList id="internalList" 
						variableRowHeight="false"
			 			dynamicObject="{_dynamicObject}"
		 				doubleClickEnabled="true" 
		 				doubleClick="openAttributeSelector()"
		 				width="100%" rowCount="1" height="24"/>
	<CenteredImage source="@Embed(source='/weave/resources/images/folder.png')" buttonMode="true" height="24"
		       toolTip="{lang('Click here to select the column used for this property.')}"
			   click="openAttributeSelector()"/>
	<CenteredImage source="@Embed(source='/weave/resources/images/trashCan.png')" buttonMode="true" height="24"
			   click="clearAttribute()"
			   toolTip="{lang('Click here to remove the column used for this property.')}"/>
	<CenteredImage id="linkImage" buttonMode="true" height="24" visible="{showLinkControl}" includeInLayout="{showLinkControl}"
				 mouseDown="toggleLinkDropDown(!linkDropDown.parent);"/>
	
	<mx:TitleWindow id="linkDropDown"
					title="Linking controls for {label}"
					showCloseButton="true"
					verticalGap="{linkControlsPadding}"
					borderThicknessTop="{linkControlsPadding}" borderThicknessRight="{linkControlsPadding}"
					borderThicknessLeft="{linkControlsPadding}" borderThicknessBottom="{linkControlsPadding}"
					paddingTop="{0}" paddingRight="{0}"
					paddingLeft="{0}" paddingBottom="{0}"
					backgroundColor="0xCCCCCC" headerHeight="20"
					horizontalAlign="right" borderStyle="outset" backgroundAlpha="1"
					close="toggleLinkDropDown();">
		<mx:HBox horizontalGap="{linkControlsPadding}">
			<HelpComponent>You can link two or more attributes together so that changing one will change the rest.  Click on the name of an existing linked group or type the name of a new one.</HelpComponent>
			<TextInputWithPrompt id="linkName" prompt="{lang('Enter a new group name')}"
								 enter="linkTo(StringUtil.trim(linkName.text));"/>
			<mx:Button label="{lang('Link')}" enabled="{linkName.text ? true : false}" click="linkTo(StringUtil.trim(linkName.text));"/>
			<mx:Button id="unlinkButton" label="{lang('Unlink')}" click="linkTo(null);"/>
		</mx:HBox>
		<mx:List id="linkList" width="100%"
				 change="if (linkDropDown.parent) linkTo(linkList.selectedItem as String);"/>
	</mx:TitleWindow>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.ui.IVisToolWithSelectableAttributes;
			import weave.data.AttributeColumns.DynamicColumn;
			
			[Bindable] public var showLabel:Boolean = true;
			[Bindable] public var showLinkControl:Boolean = true;
			
			[Embed(source='/weave/resources/images/plug-connected.png')]
			private static const icon_connected:Class;
			[Embed(source='/weave/resources/images/plug-disconnected.png')]
			private static const icon_disconnected:Class;
			
			private const linkControlsPadding:int = 2;
			
			override protected function createChildren():void
			{
				super.createChildren();
				linkDropDown.parent.removeChild(linkDropDown);
			}
			
			public function set dynamicObject(value:ILinkableDynamicObject):void
			{
				if (_dynamicObject == value)
					return;
				
				if (_dynamicObject)
					getCallbackCollection(_dynamicObject).removeCallback(toggleLinkDropDown);
				
				_dynamicObject = value;
				
				if (value)
					getCallbackCollection(value).addImmediateCallback(this, toggleLinkDropDown, true);
				
				updateLabel();
			}
			[Bindable] private var _dynamicObject:ILinkableDynamicObject
			private var _visTool:IVisToolWithSelectableAttributes = null;
			public function set visTool(value:IVisToolWithSelectableAttributes):void
			{
				_visTool = value;
				updateLabel();
			}
			
			private function updateLabel():void
			{
				if (!_visTool)
					return;
				var names:Array = _visTool.getSelectableAttributeNames();
				var attrs:Array = _visTool.getSelectableAttributes();
				var index:int = attrs.indexOf(_dynamicObject);
				if (index >= 0)
					label = names[index];
			}
			
			private function openAttributeSelector():void
			{
				if (_visTool)
					AttributeSelectorPanel.openToolSelector(_visTool, internalList.dynamicObject);
				else
					AttributeSelectorPanel.openDefaultSelector(internalList.dynamicObject, label);
			}
			
			private function clearAttribute():void
			{
				var dc:DynamicColumn = AttributeSelectorPanel.hack_findInternalDynamicColumn(internalList.dynamicObject as DynamicColumn);
				if (dc)
					dc.removeObject();
			}
			
			private function toggleLinkDropDown(show:Boolean = false):void
			{
				if (!parent)
					return;
				
				var globalName:String = null;
				if (internalList.dynamicObject)
					globalName = internalList.dynamicObject.globalName;
				else
					show = false;
				if (globalName)
				{
					linkImage.source = icon_connected;
					unlinkButton.enabled = true;
					linkImage.toolTip = lang("Linked to {0}", globalName);
				}
				else
				{
					linkImage.source = icon_disconnected;
					unlinkButton.enabled = false;
					linkImage.toolTip = lang("Open linking controls");
				}
				
				if (show)
				{
					if (!linkDropDown.parent)
						PopUpManager.addPopUp(linkDropDown, this);
					var globalBottomRight:Point = linkImage.parent.localToGlobal(new Point(linkImage.x + linkImage.width, linkImage.y + linkImage.height));
					var localPoint:Point = linkDropDown.parent.globalToLocal(globalBottomRight);
					linkDropDown.x = localPoint.x - linkDropDown.width;
					linkDropDown.y = localPoint.y;
					
					linkList.dataProvider = Weave.root.getNames(IAttributeColumn);
					linkList.selectedItem = globalName;
					linkName.text = globalName;
					linkName.setFocus();
				}
				else
				{
					if (linkDropDown.parent)
						PopUpManager.removePopUp(linkDropDown);
				}
			}
			
			private function linkTo(globalName:String):void
			{
				internalList.dynamicObject.globalName = globalName;
				toggleLinkDropDown();
			}
		]]>
	</mx:Script>
</mx:HBox>
