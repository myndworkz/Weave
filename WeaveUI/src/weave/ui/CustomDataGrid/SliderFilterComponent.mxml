<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:Box  xmlns:mx="http://www.adobe.com/2006/mxml"  implements="weave.ui.CustomDataGrid.IFilterComponent, weave.api.core.IDisposableObject"
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"  creationPolicy="all" >
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.disposeObjects;
			import weave.api.getCallbackCollection;
			import weave.api.registerLinkableChild;
			import weave.core.CallbackJuggler;
			import weave.core.LinkableNumber;
			import weave.utils.EventUtils;
			
			public function dispose():void
			{
				disposeObjects(_statsCallbackJuggler, _columnCallbackJuggler);
			}
				
			
			public var column:WeaveCustomDataGridColumn;
			
			public function mapColumnToFilter(column:WeaveCustomDataGridColumn):void{				
				 this.column = column;
				 _columnCallbackJuggler.target = column ? column.attrColumn : null;
				 _statsCallbackJuggler.target = column ? WeaveAPI.StatisticsCache.getColumnStatistics(column.attrColumn) : null;
			}
			private var _statsCallbackJuggler:CallbackJuggler = new CallbackJuggler(this, initRangeSlider, true);
			private var _columnCallbackJuggler:CallbackJuggler = new CallbackJuggler(this, initRangeSlider, true);
			
			override protected function childrenCreated():void{
				super.childrenCreated();
				// this prevents null point error while updatingDisplayList(thumbs is Null)
				rangeSlider.validateProperties();
			}
			
			protected function initRangeSlider():void
			{
				if(!column || !rangeSlider){
					callLater(initRangeSlider);
					return;
				}
				dataMinimum = WeaveAPI.StatisticsCache.getColumnStatistics(column.attrColumn).getMin();
				dataMaximum = WeaveAPI.StatisticsCache.getColumnStatistics(column.attrColumn).getMax();
				rangeSlider.values = [dataMinimum, dataMaximum];
				BindingUtils.bindSetter(handleBindableValues, rangeSlider, 'values');
				getCallbackCollection(this).addGroupedCallback(this, handleLinkableValues);				
			}
			private function handleBindableValues(values:Array):void
			{
				minimum.value = values[0];
				maximum.value = values[1];
			}
			private function handleLinkableValues():void				
			{
				rangeSlider.values = [minimum.value, maximum.value];
			}
			
			
			//only get need to be allowed set needs to be disabled
			[Bindable]		
			public var dataMinimum:Number;
			[Bindable]
			public var dataMaximum:Number; 
			
			public const minimum:LinkableNumber = registerLinkableChild(this,new LinkableNumber());
			public const maximum:LinkableNumber = registerLinkableChild(this,new LinkableNumber());
			
			//range value nor getting stored in session need to find why?s
			public function get isActive():Boolean{
				var min:Number = minimum.value;
				var max:Number = maximum.value;
				return (min != dataMinimum || max != dataMaximum);
			}
			
			
			public function filterFunction(key:Object):Boolean	{
				var value:Number = column.attrColumn.getValueFromKey(key as IQualifiedKey, Number);
				var min:Number = minimum.value;
				var max:Number = maximum.value;
				if (!isNaN(value))
				{
					if (!isNaN(min) && value < min)return false;
					if (!isNaN(max) && value > max)return false;
				}
				return true;
			}
			
			
		]]>
	</mx:Script>
	
	<mx:HSlider id="rangeSlider" thumbCount="2" liveDragging="true" width="100%" height="100%" minWidth="0"
				minimum="{dataMinimum}" maximum="{dataMaximum}"
				labels="{[dataMinimum, dataMaximum]}"
				initialize="initRangeSlider()"
				showTrackHighlight="true" />
	
</mx:Box >
