<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool">
	<mx:Canvas id="canvas" width="100%" height="100%" />
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.IKeySet;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableFunction;
			import weave.core.LinkableHashMap;
			import weave.primitives.Bounds2D;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.PlotterUtils;
			
			public const vars:LinkableHashMap = newLinkableChild(this,LinkableHashMap);
			public const beginScript:LinkableFunction = registerLinkableChild(this, new LinkableFunction(null, false, true));
			public const iterateScript:LinkableFunction = registerLinkableChild(this, new LinkableFunction(null, false, true, ['key', 'index']));
			public const endScript:LinkableFunction = registerLinkableChild(this, new LinkableFunction(null, false, true));
			public const locals:Object = {};
			
			public const dataBounds:Bounds2D = new Bounds2D();
			public const screenBounds:Bounds2D = new Bounds2D();
			public const tempShape:Shape = new Shape();
			public const tempPoint:Point = new Point();
			public const bitmap:Bitmap = new Bitmap(new BitmapData(500, 500, true));
			public function get bitmapData():BitmapData { return bitmap.bitmapData; }
			public const bitmapText:BitmapText = new BitmapText();
			
			override protected function createChildren():void{
				super.createChildren();
				canvas.rawChildren.addChild(bitmap);
			}

			public function getVar(name:String):ILinkableObject
			{
				return vars.getObject(name);
			}
			public function get keys():Array
			{
				return _keys;
			}
			private var _keys:Array;
			
			override protected function childrenCreated():void{
				super.childrenCreated();
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList.apply(this,arguments);
				try
				{
					if (!PlotterUtils.setBitmapDataSize(bitmap, unscaledWidth, unscaledHeight))
						PlotterUtils.clearBitmapData(bitmap);
					
					if (detectLinkableObjectChange(updateDisplayList, vars))
						_keys = ColumnUtils.getAllKeys(vars.getObjects(IKeySet));
					
					beginScript.apply(this);
					for (var i:int = 0; i < _keys.length; i++)
					{
						iterateScript.apply(this, [_keys[i], i]);
					}
					endScript.apply(this);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>
